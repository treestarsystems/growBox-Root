#!/usr/bin/env node

const path = require('path');
var argv = require('minimist')(process.argv.slice(2));
const core = require(path.join(__dirname, '../server/gbmodules/gbRootModules.js'));
var gbSystem = require(path.join(__dirname, '../system_confs/system_vars.json'));
var selfsigned = require('selfsigned');
var attrs = [
	{name: 'commonName', value: `${gbSystem.systemId}.${gbSystem.systemDomain}`},
	{name: 'organizationName', value: 'growBox Project'},
	{name: 'organizationalUnitName', value: 'TreeStarSystems'}
];

function generateRootCert() {
	selfsigned.generate(attrs, {
//		keySize: 4096,
		keySize: 1024,
		days: 3650,
		algorithm: 'sha256',
		extensions: [{
			name: 'subjectAltName',
			altNames: [{
				type: 6,
				value: 'https//thegrowboxproject.com'
			}]
		}]
		}, function (err, pems) {
		//Write this data to a file and use it later in a require statement.
		console.log(pems.private.replace(/(\r\n|\n|\r)/gm, "") + "\n");
		console.log(pems.public.replace(/(\r\n|\n|\r)/gm, "") + "\n");
		console.log(pems.cert.replace(/(\r\n|\n|\r)/gm, "") + "\n");
	});
}

function generateClientCert(clientId) {
	selfsigned.generate(attrs, {
//		keySize: 4096,
		keySize: 1024,
		days: 3650,
		algorithm: 'sha256',
		clientCertificate: true,
		clientCertificateCN: clientId,
		keyPair: {
			//Require the key file data that is generated by the root cert creation
			publicKey: '-----BEGIN PUBLIC KEY-----MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCYD753oU3Av9KemztjPjjAsHemzwS81g/uE5ST5UTYcVOIb3SecN9UalVkwpj+1ToMmg1x+bBURmw5xl+k2DUfVSTvNh4kLVUpAVIhlxz2uq+ysd7rEQWQZ1Sux5dfs/km/pXOQUCEqkLIpQsBlUW9+hnKNhx+evu9VBx2zjcChwIDAQAB-----END PUBLIC KEY-----',
			privateKey: '-----BEGIN RSA PRIVATE KEY-----MIICXgIBAAKBgQCYD753oU3Av9KemztjPjjAsHemzwS81g/uE5ST5UTYcVOIb3SecN9UalVkwpj+1ToMmg1x+bBURmw5xl+k2DUfVSTvNh4kLVUpAVIhlxz2uq+ysd7rEQWQZ1Sux5dfs/km/pXOQUCEqkLIpQsBlUW9+hnKNhx+evu9VBx2zjcChwIDAQABAoGAWBG+ScE1rC4tSUk04yzVZ9yM4CLEZq5AOa5DfkjqT8WLENkknONYpaaUYLBINke+wC+1G872bkj/Q5L+MBY85UuAiHPnqEBUdqnFiT2OEohFAr93l7TTCTGQFeQwiBhzfNXIaZoY5zc1rhR5iqAhkKvZdX4lZjsFYG6aJxEOZ+ECQQDfFrzgWRjZJSexGYdkCL/NNw0v85Altz8LDPcwacAhcc8vbsn+no4ILTC3/r9Zj4/rGl4+Wsa9vbL75mi2rFORAkEArn6PUywedohFJc99WJbxLkMDq63InzknTfyZ00g4u5XJqSwv4wh4dqhKYjqbJ5P+VrDMklIPd/BT2JMk/qo4lwJBALNurmwkPYAqCkq/pc4n211LsienV4F+ag6RVyBxbj94MpSMH5vUG5kn/8997poyhicrBjJRARkLwzIomICVCoECQQCLqGXEFsqm6fgWBBR5pA2SjjZQ4L1ymobXxzXCwcoOcRs/GEuXdT8dESK/rdJigfONpOGGtsEEqMgizdpNLSYvAkEAr/zCe8PZxVdgVuGsV2RNjba3611yUJooLQ/R5z6Ebm/7aWv15G39XaJoqlzLGXLB3srPxhstlbb6DUcpr3xvyw==-----END RSA PRIVATE KEY-----'
		}
		}, function (err, pems) {
		console.log(pems.private.replace(/(\r\n|\n|\r)/gm, "") + "\n");
		console.log(pems.public.replace(/(\r\n|\n|\r)/gm, "") + "\n");
		console.log(pems.cert.replace(/(\r\n|\n|\r)/gm, "") + "\n");
		console.log(pems.clientprivate.replace(/(\r\n|\n|\r)/gm, "") + "\n");
		console.log(pems.clientpublic.replace(/(\r\n|\n|\r)/gm, "") + "\n");
		console.log(pems.clientcert.replace(/(\r\n|\n|\r)/gm, "") + "\n");
	});
}


if (argv.r) {
	console.log('Generating Root Certificate\n');
	generateRootCert();
}

if (argv.c) {
	console.log('Generating Client Certificate\n');
	generateClientCert('stem-014ogar');
}
