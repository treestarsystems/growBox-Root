const fs = require('fs');
const express = require('express');
const router = express.Router();
const core = require('../../gbmodules/gbRootCore.js');
var gbSystem = require('../../../system_confs/system_vars.json');
var selfsigned = require('../../gbmodules/selfsigned.js');

// Get Certificate Object
router.post('/retrieve/:clientId', async (req, res) => {
	//Read Certificate to object to DB
//	const loadCollection = core.loadCollection(core.coreVars.dbServer,core.coreVars.dbName,core.coreVars.dbCertsDataCollection);
//	await loadCollection.insertOne(certObject);
//	res.status(200).send(await loadCollection.find({clientFullName:req.params.clientId}).toArray());
//	res.status(200).send(await loadCollection.find({clientFullName:req.params.clientId}));
	res.status(200).send(req.params.clientId);
});

// Generate random Client Certificate Object
router.post('/generate', async (req, res) => {
	res.redirect(307, `/api/certs/generate/gbdevice-${core.genRegular(5).toLowerCase()}`);
});

// Generate Client Certificate Object
router.post('/generate/:clientId', async (req, res) => {
	fs.readFile(`${core.coreVars.systemConfsDir}/certs/growBox-Root_Cert.json`, 'utf8', (error,data) => {
		if (error) {
			console.log("growBox-Root CA does not exist. Please create a growBox-Root CA first");
			res.set('Content-Type', 'application/json');
			res.status(500).json({"timeStamp": Date.now(), "status": error, "clientName": `${req.params.clientId}`, "clientFullName": `${req.params.clientId}.${gbSystem.systemDomain}`, "clientCert": "growBox-Root CA does not exist. Please create a growBox-Root CA first"});
		}
		try {
			caData = JSON.parse(data);
			var pems = selfsigned.generate(core.coreVars.certAttrs, {
				clientCertificate: true,
				clientCertificateCN: `${req.params.clientId}.${gbSystem.systemDomain}`,
				keyPair: {
					//Require the key file data that is generated by the root cert creation
					publicKey: caData.public,
					privateKey: caData.private
				}
			});
			//Bundle the Client data only into a object
			certObject = {"timeStamp": Date.now(), "status": "success", "clientName": `${req.params.clientId}`,  "clientFullName": `${req.params.clientId}.${gbSystem.systemDomain}`, "clientPrivate": pems.clientprivate, "clientPublic": pems.clientpublic, "clientCert": pems.clientcert};
			//Add Certificate to object to DB
//			const loadCollection = core.loadCollection(core.coreVars.dbServer,core.coreVars.dbName,core.coreVars.dbCertsDataCollection);
//			await loadCollection.insertOne(certObject);
			//Send Client certifiate data object
			res.status(200).json(certObject);
		} catch (error) {
			if (error = 'undefined') {
					error = "Undefined error";
			}
			res.status(500).json({"timeStamp": Date.now(), "status": error, "clientName": `${req.params.clientId}`, "clientFullName": `${req.params.clientId}.${gbSystem.systemDomain}`, "clientCert": `growBox-Root CA object is empty, invalid, or does not exist. Please create a growBox-Root CA first or use the 'pm2 log' as the ${gbSystem.username} user for more information.`});
		}
	});
});

//COPIED CODE
/*
// Get certsData
router.get('/', async (req, res) => {
  const certs = await useCollection(collectionName);
  res.send(await certs.find({}).toArray());
});

// Get BranchData
router.get('/info/:certsName', async (req, res) => {
  const certs = await useCollection(collectionName);
  res.send(await certs.find({name:req.params.certsName}).toArray());
});

// Add certsData
router.post('/', async (req, res) => {
  const certs = await useCollection(collectionName);
  var certsDataInput = req.body;
      //Add timestamp to entry
      certsDataInput.timeStamp = Date.now();
	console.log(certsDataInput);
  await certs.insertOne(
	//Please note that the {} are not in this request because
	//it is included in the POST request.
        certsDataInput
  );
  res.status(201).send();
});

// Delete certsData
router.delete('/:id', async (req, res) => {
  const certs = await useCollection(collectionName);
  await certs.deleteOne({ _id: new mongodb.ObjectID(req.params.id) });
  res.status(200).send();
});

*/

module.exports = router;
